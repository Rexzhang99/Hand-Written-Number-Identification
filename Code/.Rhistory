{
cor(dat1[, 1], dat2[, 1]) + cor(dat1[, 2], dat2[, 2]);
}
# Please set the proper path of this file.
load("../train.RData");
guess = function(verbose = FALSE)
{
test = getData();
coefs = sapply(recogTrain, traceCorr, dat2 = test);
num = which.max(coefs);
if(num == 10) num = 0;
if(verbose) print(coefs);
cat("I guess what you have input is ", num, ".\n", sep = "");
}
View(recogTrain)
#Loading magick package
library(magick)
#reading a png image frink image
frink <- image_read("https://jeroen.github.io/images/frink.png")
#installing magick package from CRAN
install.packages('magick')
#Loading magick package
library(magick)
#reading a png image frink image
frink <- image_read("https://jeroen.github.io/images/frink.png")
#reading a jpg image ex-President Barack Obama from Wikipedia
obama <- image_read('https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/President_Barack_Obama.jpg/800px-President_Barack_Obama.jpg')
frink
#installing magick package from CRAN
install.packages('readmnist')
#Loading magick package
library(readmnist)
Read.mnist("/Users/Trent/Downloads/train-images.idx3-ubyte")
Read.mnist("/Users/Trent/Downloads/train-images.idx3-ubyte")
Info <-Read.mnist("/Users/Trent/Downloads/train-images.idx3-ubyte")
View(Info)
Info[["pic"]]
t=Info$pic[1:10,]
View(t)
t=Info$pic[1:1000,]
Label <-Read.mnist("/Users/Trent/Downloads/train-images.idx1-ubyte")
install.packages(c("ggplot2", "kernlab", "reshape", "reshape2"))
p = seq(0, 1, 0.01)
gini = p * (1 - p) * 2
entropy = -(p * log(p) + (1 - p) * log(1 - p))
class.err = 1 - pmax(p, 1 - p)
dt=reshape2::melt(as.data.frame(p,gini,entropy,class.err))
View(dt)
rm(list=lm())
ls()
p = seq(0, 1, 0.01)
gini = p * (1 - p) * 2
entropy = -(p * log(p) + (1 - p) * log(1 - p))
ls()
rm(list=ls())
rm(list=ls())
p = seq(0, 1, 0.01)
gini = p * (1 - p) * 2
entropy = -(p * log(p) + (1 - p) * log(1 - p))
class.err = 1 - pmax(p, 1 - p)
dt=reshape2::melt(as.data.frame(p,gini,entropy,class.err))
as.data.frame(p,gini,entropy,class.err)
data.frame(p,gini,entropy,class.err)
dt=reshape2::melt(data.frame(p,gini,entropy,class.err))
View(dt)
dt=reshape2::melt(data.frame(p,gini,entropy,class.err),id="p")
View(dt)
View(dt)
ggplot2::ggplot(dt, aes(p, value, variable))+geom_point()
library(ggplot2)
ggplot(dt, aes(p, value, variable))+geom_point()
ggplot(dt, aes(p, value, color=variable))+geom_point()
ggplot(dt, aes(p, value, color=variable))+geom_point()
############new#######
library("mlr")
rm(list=ls())
setwd("/Users/Trent/Documents/Study/Courses/2020Spring/Data Mining II/Homework/Final Project/Code")
set.seed(1234567)
############load data##########
# helper function for visualization
show_digit = function(arr784, col = gray(12:1 / 12), ...) {
image(matrix(as.matrix(arr784[-785]), nrow = 28)[, 28:1], col = col, ...)
}
# load image files
load_image_file = function(filename) {
ret = list()
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n    = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
nrow = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
ncol = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
x = readBin(f, 'integer', n = n * nrow * ncol, size = 1, signed = FALSE)
close(f)
data.frame(matrix(x, ncol = nrow * ncol, byrow = TRUE))
}
# load label files
load_label_file = function(filename) {
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
y = readBin(f, 'integer', n = n, size = 1, signed = FALSE)
close(f)
y
}
# load images
train0 = load_image_file("../Data/train-images-idx3-ubyte")
test0  = load_image_file("../Data/t10k-images-idx3-ubyte")
# load labels
train0$y = as.factor(load_label_file("../Data/train-labels-idx1-ubyte"))
test0$y  = as.factor(load_label_file("../Data/t10k-labels-idx1-ubyte"))
train=sample(train0,5000)
test=sample(test0,5000)
# view test image
show_digit(train[1000, ])
############new#######
library("mlr")
class.task=makeClassifTask(data=train0[1:10000,],target="y")
class.task
train.set = seq(1, n, by = 2)
############new#######
library("mlr")
class.task=makeClassifTask(data=train0[1:10000,],target="y")
class.task
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='response',scaled=0)
class.lrn
class.lrn$par.set
class.lrn=makeLearner("classif.ksvm",predict.type='response',scaled=0)
class.lrn=makeLearner("classif.ksvm",predict.type='response',scaled=FALSE)
class.lrn
class.lrn$par.set
mod=train(class.lrn,class.task)
pred = predict(mod, task = class.task, subset = test.set)
View(pred)
pred[["data"]][["truth"]]
pred[["data"]][["response"]]
as.fata.frame(pred)
as.data.frame(pred)
head(as.data.frame(pred))
calculateConfusionMatrix(pred)
calculateConfusionMatrix(pred,relative = TRUE)
pred$threshold
class.lrn=makeLearner("classif.ksvm",predict.type='prob',scaled=FALSE)
class.lrn
class.lrn$par.set
mod=train(class.lrn,class.task)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
plotLearnerPrediction(class.lrn, task = class.task)
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
conf.matrix
plotLearnerPrediction(class.lrn, task = class.task)
class.task
class.lrn
class.lrn$par.set
getDefaultMeasure(class.lrn)
getDefaultMeasure(class.task)
discrete_ps = makeParamSet(
makeDiscreteParam("C", values = c(0.5, 1.0, 1.5, 2.0)),
makeDiscreteParam("sigma", values = c(0.5, 1.0, 1.5, 2.0))
)
discrete_ps
##manual tune#####
discrete_ps = makeParamSet(
makeDiscreteParam("C", values = c(0.5, 1.0, 1.5, 2.0)),
makeDiscreteParam("sigma", values = c(0.5, 1.0, 1.5, 2.0))
)
ctrl = makeTuneControlGrid()
rdesc = makeResampleDesc("CV", iters = 3L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
SVM.task=makeClassifTask(data=train0[1:5000,],target="y")
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='prob',scaled=FALSE)
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
##manual tune#####
discrete_ps = makeParamSet(
makeDiscreteParam("C", values = c(0.5, 1.0, 1.5, 2.0)),
makeDiscreteParam("sigma", values = c(0.5, 1.0, 1.5, 2.0))
)
ctrl = makeTuneControlGrid()
rdesc = makeResampleDesc("CV", iters = 3L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
#new#######
library("mlr")
SVM.task=makeClassifTask(data=train0[1:2000,],target="y")
class.task
getDefaultMeasure(class.task)
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='prob',scaled=FALSE)
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
View(pred)
class.task=makeClassifTask(data=train0[1:2000,],target="y")
class.task
getDefaultMeasure(class.task)
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='prob',scaled=FALSE)
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
View(mod)
View(mod)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
##manual tune#####
discrete_ps = makeParamSet(
makeDiscreteParam("C", values = c(0.5, 1.0, 1.5, 2.0)),
makeDiscreteParam("sigma", values = c(0.5, 1.0, 1.5, 2.0))
)
ctrl = makeTuneControlGrid()
rdesc = makeResampleDesc("CV", iters = 3L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
##manual tune#####
discrete_ps = makeParamSet(
makeDiscreteParam("C", values = c(0.5, 1.0, 1.5, 2.0)),
makeDiscreteParam("sigma", values = c(0.5, 1.0, 1.5, 2.0))
)
ctrl = makeTuneControlGrid()
# rdesc = makeResampleDesc("CV", iters = 3L)
rdesc = makeResampleDesc()
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
##manual tune#####
discrete_ps = makeParamSet(
makeDiscreteParam("C", values = c(0.5, 1.0, 1.5, 2.0)),
makeDiscreteParam("sigma", values = c(0.5, 1.0, 1.5, 2.0))
)
ctrl = makeTuneControlGrid()
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = 10, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 10L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
#new#######
library("mlr")
class.task=makeClassifTask(data=train0[1:1000,],target="y")
class.task
getDefaultMeasure(class.task)
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='prob',scaled=FALSE)
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = 10, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 10L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = discrete_ps, control = ctrl)
generateHyperParsEffectData(res)
conf.matrix
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = 10, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 10L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
generateHyperParsEffectData(res)
res
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = 1, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 10L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
res
generateHyperParsEffectData(res)
class.lrn=makeLearner("classif.ksvm",predict.type='prob')
class.lrn=makeLearner("classif.ksvm",predict.type='prob')
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
conf.matrix
generateHyperParsEffectData(res)
plotHyperParsEffect(res.data, x = "iteration", y = "acc.test.mean",
plot.type = "line")
res.data=generateHyperParsEffectData(res)
res.data
plotHyperParsEffect(res.data, x = "iteration", y = "acc.test.mean",
plot.type = "line")
plotHyperParsEffect(res.data, x = "iteration", y = "acc.test.mean",plot.type = "line")
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
library('ggplot2')
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap", interpolate = "regr.earth")+
theme_minimal()
install.packages('earth')
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap", interpolate = "regr.earth")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap", interpolate = "regr.earth")
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test",plot.type = "heatmap", interpolate = "regr.earth")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap", interpolate = "regr.earth")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "point", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "contour", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "heatmap", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
res.data$data$mmce.test.mean
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "scatter", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = 1, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 20L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
res
res.data=generateHyperParsEffectData(res)
res.data
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "scatter", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -100, upper = -7, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 20L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
res
res.data=generateHyperParsEffectData(res)
res.data
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "scatter", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = -7, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 20L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
res
res.data=generateHyperParsEffectData(res)
res.data
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "scatter", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
library("mlr")
library('ggplot2')
class.task=makeClassifTask(data=train0[1:5000,],target="y")
class.task
getDefaultMeasure(class.task)
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='prob')
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
conf.matrix
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = -7, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 20L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
res
res.data=generateHyperParsEffectData(res)
res.data
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "scatter", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
save.image("~/Documents/Study/Courses/2020Spring/Data Mining II/Homework/Final project/Code/SVM.RData")
class.lrn=makeLearner("classif.nnTrain",predict.type='prob')
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
conf.matrix
class.lrn=makeLearner("classif.nnTrain",predict.type='prob')
install.packages(deepnet)
install.packages('deepnet')
big.matrix(train0[1:5000,])
library(bigmemory)
big.matrix(train0[1:5000,])
as.big.matrix(train0[1:5000,])
class.task=makeClassifTask(data=as.big.matrix(train0[1:5000,]),target="y")
class.task
getDefaultMeasure(class.task)
n = getTaskSize(class.task)
train.set = seq(1, n, by = 2)
test.set = seq(2, n, by = 2)
class.lrn=makeLearner("classif.ksvm",predict.type='prob')
class.lrn
class.lrn$par.set
##default parameter####
mod=train(class.lrn,class.task, subset = train.set)
pred = predict(mod, task = class.task, subset = test.set)
head(as.data.frame(pred))
conf.matrix =calculateConfusionMatrix(pred,relative = TRUE)
conf.matrix
##manual tune#####
num_ps = makeParamSet(
makeNumericParam("C", lower = -10, upper = 10, trafo = function(x) 10^x),
makeNumericParam("sigma", lower = -10, upper = -7, trafo = function(x) 10^x)
)
ctrl = makeTuneControlRandom(maxit = 20L)
rdesc = makeResampleDesc("CV", iters = 2L)
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
res
res.data=generateHyperParsEffectData(res)
res.data
plotHyperParsEffect(res.data, x = "iteration", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "sigma", y = "mmce.test.mean",plot.type = "line")+
theme_minimal()
plotHyperParsEffect(res.data, x = "C", y = "sigma",z= "mmce.test.mean",plot.type = "scatter", interpolate = "regr.earth", show.experiments = TRUE)+
theme_minimal()
#new#######
library("mlr")
res = tuneParams(class.lrn, task = class.task, resampling = rdesc,par.set = num_ps, control = ctrl)
