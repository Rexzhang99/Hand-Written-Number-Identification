import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn import svm
from sklearn.metrics import confusion_matrix
from keras.datasets import mnist
import seaborn as sns
import numpy as np
import time
import pickle

sns.set()

(x_train, y_train), (x_test, y_test) = mnist.load_data()
num_classes = 10
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# n=0.2
# x_train=x_train[1:int(60000*n)+1,]
# x_test=x_test[1:int(10000*n)+1,]
# y_train=y_train[1:int(60000*n)+1,]
# y_test=y_test[1:int(10000*n)+1,]



print('Train size:', x_train.shape[0])
print('Test size:', x_test.shape[0])

# Following code is too slow consider SGD
# clf = svm.LinearSVC()

# with open("Result/nist_tests_SVM.csv", "w") as fh_out:
#     for alpha in [0.0001,0.001,0.01,0.1,10]:
#         for l1_ratio in [0,0.2,0.4,0.6,0.8,1]:
#             print("*", end="")
#             clf = linear_model.SGDClassifier(max_iter=1000, tol=1e-3,alpha=alpha,penalty='elasticnet',l1_ratio=l1_ratio,learning_rate='optimal')
#             clf_fit=clf.fit(train_imgs, np.ravel(train_labels))
#             train_score = clf_fit.score(train_imgs, np.ravel(train_labels))
#             test_score = clf_fit.score(test_imgs, np.ravel(test_labels))
#
#             outstr = str(alpha) + " " + str(l1_ratio) + " "
#             outstr += str(train_score) + " " + str(test_score)
#
#             fh_out.write(outstr + "\n")
#             fh_out.flush()

# clf = linear_model.SGDClassifier(max_iter=1000, tol=1e-3)
# start_time = time.time()
# clf_fit=clf.fit(x_train, y_train)
# print("--- %s seconds ---" % (time.time() - start_time))
#
# train_score=clf_fit.score(x_train,y_train)
# test_score=clf_fit.score(x_test,y_test)
# cm=confusion_matrix(np.ravel(y_test),clf_fit.predict(x_test))
# print('Train Accuracy=',train_score)
# print('Test Accuracy=',test_score)
# print(cm)


# clf = svm.SVC(kernel='linear')
# start_time = time.time()
# clf_fit=clf.fit(x_train, y_train)
# print("--- %s seconds ---" % (time.time() - start_time))

#
# train_score=clf_fit.score(x_train,y_train)
# test_score=clf_fit.score(x_test,y_test)
# cm=confusion_matrix(np.ravel(y_test),clf_fit.predict(x_test))
# print('Train Accuracy=',train_score)
# print('Test Accuracy=',test_score)
# print(cm)


with open("Result/nist_tests_SVM_rbf.csv", "w") as fh_out:
    for gamma in range(4):
        gamma = 10 ** -(gamma + 1)
        print("gamma=",gamma)
        clf = svm.SVC(kernel='rbf',gamma=gamma)
        start_time = time.time()
        clf_fit = clf.fit(x_train, y_train)
        training_time = time.time() - start_time
        print("--- %s seconds ---" % (training_time))

        outfile = 'SVMrbfmodel/' + str(gamma)
        with open(outfile, 'wb') as pickle_file:
            pickle_file = pickle.dump(clf, pickle_file)

        train_score = clf_fit.score(x_train, y_train)
        test_score = clf_fit.score(x_test, y_test)
        cm = confusion_matrix(np.ravel(y_test), clf_fit.predict(x_test))
        print('Train Accuracy=', train_score)
        print('Test Accuracy=', test_score)
        print(cm)

        outstr = str(gamma) + " " + str(train_score) + " " + str(test_score) +' '+str(training_time)
        fh_out.write(outstr + "\n")
        fh_out.flush()

with open("Result/nist_tests_SVM_poly.csv", "w") as fh_out:
    for degree in range(5):
        degree=degree+1
        for gamma in range(4):
            gamma=10**-(gamma)
            print("degree=" ,degree,"gamma=",gamma)
            clf = svm.SVC(kernel='poly', degree=degree,gamma=gamma)
            start_time = time.time()
            clf_fit = clf.fit(x_train, y_train)
            training_time=time.time() - start_time
            print("--- %s seconds ---" % (training_time))

            outfile = 'SVMpolymodel/' + str(degree) + '_' +str(gamma)
            with open(outfile, 'wb') as pickle_file:
                pickle_file = pickle.dump(clf, pickle_file)

            train_score = clf_fit.score(x_train, y_train)
            test_score = clf_fit.score(x_test, y_test)
            cm = confusion_matrix(np.ravel(y_test), clf_fit.predict(x_test))
            print('Train Accuracy=', train_score)
            print('Test Accuracy=', test_score)
            print(cm)

            outstr = str(degree) + " " + str(gamma) + " " + str(train_score) + " " + str(test_score)+' '+str(training_time)
            fh_out.write(outstr + "\n")
            fh_out.flush()


